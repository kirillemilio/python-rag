# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: proto/retriever.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ('RetrieverBase', 'RetrieverStub')

from typing import TYPE_CHECKING

import betterproto2
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

if TYPE_CHECKING:
	import grpclib.server
	from betterproto2.grpc.grpclib_client import MetadataLike
	from grpclib.metadata import Deadline

betterproto2.check_compiler_version('0.6.0')


class RetrieverStub(betterproto2.ServiceStub):
	async def add_text_document(
		self,
		message: '_text__.TextDocumentAddRequest',
		*,
		timeout: 'float | None' = None,
		deadline: 'Deadline | None' = None,
		metadata: 'MetadataLike | None' = None,
	) -> '_text__.TextDocumentAddResponse':
		return await self._unary_unary(
			'/retriever.Retriever/AddTextDocument',
			message,
			_text__.TextDocumentAddResponse,
			timeout=timeout,
			deadline=deadline,
			metadata=metadata,
		)

	async def search_by_text(
		self,
		message: '_text__.TextRequest',
		*,
		timeout: 'float | None' = None,
		deadline: 'Deadline | None' = None,
		metadata: 'MetadataLike | None' = None,
	) -> '_text__.TextChunksResponse':
		return await self._unary_unary(
			'/retriever.Retriever/SearchByText',
			message,
			_text__.TextChunksResponse,
			timeout=timeout,
			deadline=deadline,
			metadata=metadata,
		)

	async def search_by_image(
		self,
		message: '_image__.ImageRequest',
		*,
		timeout: 'float | None' = None,
		deadline: 'Deadline | None' = None,
		metadata: 'MetadataLike | None' = None,
	) -> '_text__.TextChunksResponse':
		return await self._unary_unary(
			'/retriever.Retriever/SearchByImage',
			message,
			_text__.TextChunksResponse,
			timeout=timeout,
			deadline=deadline,
			metadata=metadata,
		)


from .. import image as _image__
from .. import text as _text__


class RetrieverBase(ServiceBase):
	async def add_text_document(
		self, message: '_text__.TextDocumentAddRequest'
	) -> '_text__.TextDocumentAddResponse':
		raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

	async def search_by_text(self, message: '_text__.TextRequest') -> '_text__.TextChunksResponse':
		raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

	async def search_by_image(
		self, message: '_image__.ImageRequest'
	) -> '_text__.TextChunksResponse':
		raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

	async def __rpc_add_text_document(
		self,
		stream: 'grpclib.server.Stream[_text__.TextDocumentAddRequest, _text__.TextDocumentAddResponse]',
	) -> None:
		request = await stream.recv_message()
		response = await self.add_text_document(request)
		await stream.send_message(response)

	async def __rpc_search_by_text(
		self, stream: 'grpclib.server.Stream[_text__.TextRequest, _text__.TextChunksResponse]'
	) -> None:
		request = await stream.recv_message()
		response = await self.search_by_text(request)
		await stream.send_message(response)

	async def __rpc_search_by_image(
		self, stream: 'grpclib.server.Stream[_image__.ImageRequest, _text__.TextChunksResponse]'
	) -> None:
		request = await stream.recv_message()
		response = await self.search_by_image(request)
		await stream.send_message(response)

	def __mapping__(self) -> 'dict[str, grpclib.const.Handler]':
		return {
			'/retriever.Retriever/AddTextDocument': grpclib.const.Handler(
				self.__rpc_add_text_document,
				grpclib.const.Cardinality.UNARY_UNARY,
				_text__.TextDocumentAddRequest,
				_text__.TextDocumentAddResponse,
			),
			'/retriever.Retriever/SearchByText': grpclib.const.Handler(
				self.__rpc_search_by_text,
				grpclib.const.Cardinality.UNARY_UNARY,
				_text__.TextRequest,
				_text__.TextChunksResponse,
			),
			'/retriever.Retriever/SearchByImage': grpclib.const.Handler(
				self.__rpc_search_by_image,
				grpclib.const.Cardinality.UNARY_UNARY,
				_image__.ImageRequest,
				_text__.TextChunksResponse,
			),
		}
